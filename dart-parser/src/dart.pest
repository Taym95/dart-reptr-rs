// Based on "Dart Programming Language Specification", 5th edition, Version 2.10
//
// https://dart.dev/guides/language/specifications/DartLangSpec-v2.10.pdf

// 8 Variables

FinalConstVarOrType =
    { "final" ~ Type?
    | "const" ~ Type?
    | VarOrType
    }
VarOrType = { "var" | Type }
InitializedVariableDeclaration =
    { DeclaredIdentifier ~ ("=" ~ Expression)? ~ ("," ~ InitializedIdentifier)* }
InitializedIdentifier = { Identifier ~ ("=" ~ Expression)? }
InitializedIdentifierList = { InitializedIdentifier ~ ("," ~ InitializedIdentifier)* }

// 9 Functions

FunctionSignature = { Type? ~ Identifier ~ FormalParameterPart }
FormalParameterPart = { TypeParameters? ~ FormalParameterList }
FunctionBody =
    { "async"? ~ "=>" ~ Expression ~ ";"
    | ("async" ~ "*"? | "sync" ~ "*")? ~ Block
    }
Block = { "{" ~ Statements ~ "}" }

// 9.2 Formal Parameters

FormalParameterList =
    { "(" ~ ")"
    | "(" ~ NormalFormalParameters ~ ","? ~ ")"
    | "(" ~ NormalFormalParameters ~ "," ~ OptionalOrNamedFormalParameters ~ ")"
    | "(" ~ OptionalOrNamedFormalParameters ~ ")"
    }
NormalFormalParameters = { NormalFormalParameter ~ ("," ~ NormalFormalParameter)* }
OptionalOrNamedFormalParameters =
    { OptionalPositionalFormalParameters
    | NamedFormalParameters
    }
OptionalPositionalFormalParameters =
    { "[" ~ DefaultFormalParameter ~ ("," ~ DefaultFormalParameter)* ~ ","? ~ "]" }
NamedFormalParameters =
    { "{" ~ DefaultNamedParameter ~ ("," ~ DefaultNamedParameter)* ~ ","? ~ "}" }

// 9.2.1 Required Formals

NormalFormalParameter = { Metadata ~ NormalFormalParameterNoMetadata }
NormalFormalParameterNoMetadata =
    { FunctionFormalParameter
    | FieldFormalParameter
    | SimpleFormalParameter
    }
FunctionFormalParameter = { "covariant"? ~ Type? ~ Identifier ~ FormalParameterPart }
SimpleFormalParameter = { DeclaredIdentifier | "covariant"? ~ Identifier }
DeclaredIdentifier = { "covariant"? ~ FinalConstVarOrType ~ Identifier }
FieldFormalParameter = { FinalConstVarOrType? ~ "this" ~ "." ~ Identifier ~ FormalParameterPart? }

// 9.2.2 Optional Formals

DefaultFormalParameter = { NormalFormalParameter ~ ("=" ~ Expression)? }
DefaultNamedParameter = { NormalFormalParameter ~ (("=" | ":") ~ Expression)? }

// 10 Classes

ClassDeclaration =
    { "abstract"? ~ "class" ~ Identifier ~ TypeParameters? ~ Superclass? ~ Interfaces? ~ "{" ~ (Metadata ~ ClassMemberDeclaration)* ~ "}"
    | "abstract"? ~ "class" ~ MixinApplicationClass
    }
TypeNotVoidList = { TypeNotVoid ~ ("," ~ TypeNotVoid)* }
MethodSignature =
    { ConstructorSignature ~ Initializers?
    | FactoryConstructorSignature
    | "static"? ~ FunctionSignature
    | "static"? ~ GetterSignature
    | "static"? ~ SetterSignature
    | OperatorSignature
    }

Declaration =
    { "extarnal" ~ FactoryConstructorSignature
    | "external" ~ ConstantConstructorSignature
    | "external" ~ ConstructorSignature
    | ("external" ~ "static"?)? ~ GetterSignature
    | ("external" ~ "static"?)? ~ SetterSignature
    | ("external" ~ "static"?)? ~ FunctionSignature
    | "external"? ~ OperatorSignature
    | "static" ~ "const" ~ Type? ~ StaticFinalDeclarationList
    | "static" ~ "final" ~ Type? ~ StaticFinalDeclarationList
    | "static" ~ "final" ~ Type? ~ InitializedIdentifierList
    | "static" ~ VarOrType ~ InitializedIdentifierList
    | "covariant" ~ VarOrType ~ InitializedIdentifierList
    | "final" ~ Type? ~ InitializedIdentifierList
    | VarOrType ~ InitializedIdentifierList
    | ConstantConstructorSignature ~ (Redirection | Initializers)?
    }

// 10.1.1 Operators

OperatorSignature = { Type? ~ "operator" ~ Operator ~ FormalParameterList }
Operator = { "~" | BinaryOperator | "[]" | "[]=" }
BinaryOperator =
    { MultiplicativeOperator
    | AdditiveOperator
    | ShiftOperator
    | RelationalOperator
    | "=="
    | BitwiseOperator
    }

// 10.6 Constructors

// 10.6.1 Generative Constructors

ConstructorSignature = { ConstructorName ~ FormalParameterList }
ConstructorName = { TypeIdentifier ~ ("." ~ Identifier)? }

Redirection = { ":" ~ "this" ~ ("." ~ Identifier)? ~ Arguments }

Initializers = { ":" ~ InitializerListEntry ~ ("," ~ InitializerListEntry)* }
InitializerListEntry =
    { "super" ~ Arguments
    | "super" ~ "." ~ Identifier ~ Arguments
    | FieldInitializer
    | Assertion
    }

FieldInitializer = { ("this" ~ ".")? ~ Identifier ~ "=" ~ InitializerExpression }

InitializerExpression = { ConditionalExpression | Cascade }

// 10.6.2 Factories

FactoryConstructorSignature = { "const"? ~ "factory" ~ ConstructorName ~ FormalParameterList }

RedirectingFactoryConstructor = { "const"? ~ "factory" ~ ConstructorName ~ FormalParameterList ~ "=" ~ ConstructorDesignation }

ConstructorDesignation =
    { TypeIdentifier
    | QualifiedName
    | TypeName ~ TypeArguments ~ ("." ~ Identifier)?
    }

// 10.6.3 Constant Constructors

ConstantConstructorSignature = { "const" ~ ConstructorName ~ FormalParameterList }

// 15 Generics

TypeParameter = { Metadata ~ Identifier ~ ("extends" ~ TypeNotVoid)? }
TypeParameters = { "<" ~ TypeParameter ~ ("," ~ TypeParameter)* ~ ">" }

// 16 Metadata

Metadata = { ("@" ~ Metadatum)* }
Metadatum = { Identifier | QualifiedName | ConstructorDesignation ~ Arguments }

// 17 Expressions

Expression =
    { AssignableExpression ~ AssignmentOperator ~ Expression
    | ConditionalExpression
    | Cascade
    | ThrowExpression
    }
ExpressionWithoutCascade =
    { AssignableExpression ~ AssignmentOperator ~ ExpressionWithoutCascade
    | ConditionalExpression
    | ThrowExpressionWithoutCascade
    }
ExpressionList = { Expression ~ ("," ~ Expression)* }
Primary =
    { ThisExpression
    | FunctionExpression
    | Literal
    | Identifier
    | NewExpression
    | ConstObjectExpression
    | ConstructorInvocation
    | "(" ~ Expression ~ ")"
    }
Literal =
    { NullLiteral
    | BooleanLiteral
    | NumericalLiteral
    | StringLiteral
    | SymbolLiteral
    | ListLiteral
    | SetOrMapLiteral
    }

// 17.4 Null

NullLiteral = { "null" }

// 17.5 Numbers

NumericalLiteral = { Number | HexNumber }
Number =
    @{ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? ~ Exponent?
    | "." ~ ASCII_DIGIT+ ~ Exponent?
    }
Exponent = @{ ^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+ }
HexNumber = @{ ^"0x" ~ ASCII_HEX_DIGIT+ }

// 17.6 Booleans

BooleanLiteral = { "true" | "false" }

// 17.7 Strings

StringLiteral = { (MultilineString | SingleLineString)+ }
SingleLineString =
    { RawSingleLineString
    | SingleLineStringSqBeginEnd
    | SingleLineStringSqBeginMid ~ Expression ~ (SingleLineStringSqMidMid ~ Expression)* ~ SingleLineStringSqMidEnd
    | SingleLineStringDqBeginEnd
    | SingleLineStringDqBeginMid ~ Expression ~ (SingleLineStringDqMidMid ~ Expression)* ~ SingleLineStringDqMidEnd
    }
RawSingleLineString =
    @{ "r" ~ "'" ~ (!("'" | "\r" | "\n") ~ ANY)* ~ "'"
    | "r" ~ "\"" ~ (!("\"" | "\r" | "\n") ~ ANY)* ~ "\""
    }

StringContentCommon =
    @{ !("\\" | "'" | "\"" | "$" | "\r" | "\n") ~ ANY
    | EscapeSequence
    | "\\" ~ !("n" | "r" | "b" | "t" | "v" | "x" | "u" | "\r" | "\n")
    | SimpleStringInterpolation
    }

StringContentSq = @{ StringContentCommon | "\"" }
SingleLineStringSqBeginEnd = { "'" ~ StringContentSq* ~ "'" }
SingleLineStringSqBeginMid = { "'" ~ StringContentSq* ~ "${" }
SingleLineStringSqMidMid = { "}" ~ StringContentSq* ~ "${" }
SingleLineStringSqMidEnd = { "}" ~ StringContentSq* ~ "'" }

StringContentDq = { StringContentCommon | "'" }
SingleLineStringDqBeginEnd = { "\"" ~ StringContentDq* ~ "\"" }
SingleLineStringDqBeginMid = { "\"" ~ StringContentDq* ~ "${" }
SingleLineStringDqMidMid = { "}" ~ StringContentDq* ~ "${" }
SingleLineStringDqMidEnd = { "}" ~ StringContentDq* ~ "\"" }

MultilineString =
    { RawMultiLineString
    | MultiLineStringSqBeginEnd
    | MultiLineStringSqBeginMid ~ Expression ~ (MultiLineStringSqMidMid ~ Expression)* ~ MultiLineStringSqMidEnd
    | MultiLineStringDqBeginEnd
    | MultiLineStringDqBeginMid ~ Expression ~ (MultiLineStringDqMidMid ~ Expression)* ~ MultiLineStringDqMidEnd
    }
RawMultiLineString =
    { "r" ~ "'''" ~ (!"'''" ~ ANY)* ~ "'''"
    | "r" ~ "\"\"\"" ~ (!"\"\"\"" ~ ANY)* ~ "\"\"\""
    }

QuotesSq = { "'" | "''" }
StringContentTsq = { QuotesSq ~ (StringContentCommon | "\"" | "\r" | "\n") }
MultiLineStringSqBeginEnd = { "'''" ~ StringContentTsq* ~ "'''" }
MultiLineStringSqBeginMid = { "'''" ~ StringContentTsq* ~ QuotesSq ~ "${" }
MultiLineStringSqMidMid = { "}" ~ StringContentTsq* ~ QuotesSq ~ "${" }
MultiLineStringSqMidEnd = { "}" ~ StringContentTsq* ~ "'''" }

QuotesDq = { "\"" | "\"\"" }
StringContentTdq = { QuotesDq ~ (StringContentCommon | "'" | "\r" | "\n") }
MultiLineStringDqBeginEnd = { "\"\"\"" ~ StringContentTdq* ~ "\"\"\"" }
MultiLineStringDqBeginMid = { "\"\"\"" ~ StringContentTdq* ~ QuotesDq ~ "${" }
MultiLineStringDqMidMid = { "}" ~ StringContentTdq* ~ QuotesDq ~ "${" }
MultiLineStringDqMidEnd = { "}" ~ StringContentTdq* ~ "\"\"\"" }

EscapeSequence =
    { "\\n" | "\\r" | "\\f" | "\\b" | "\\t" | "\\v"
    | "\\x" ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT
    | "\\u" ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT ~ ASCII_HEX_DIGIT
    | "\\u{" ~ HexDigitSequence ~ "}"
    }
HexDigitSequence = @{ HexDigitSequence{1, 6} }

// 17.7.1 String Interpolation

StringInterpolation =
    { SimpleStringInterpolation
    | "${" ~ Expression ~ "}"
    }
SimpleStringInterpolation = { "$" ~ IdentifierNoDollar }

// 17.8 Symbols

SymbolLiteral = { "#" ~ (Operator | (Identifier ~ ("." ~ Identifier)*)) }

// 17.9 Collection Literals

ListLiteral = { "const"? ~ TypeArguments? ~ "[" ~ Elements? ~ "]" }
SetOrMapLiteral = { "const"? ~ TypeArguments? ~ "{" ~ Elements? ~ "}" }
Elements = { Element ~ ("," ~ Element)* ~ ","? }
Element =
    { ExpressionElement
    | MapElement
    | SpreadElement
    | IfElement
    | ForElement
    }
ExpressionElement = { Expression }
MapElement = { Expression ~ ":" ~ Expression }
SpreadElement = { ("..." | "...?") ~ Expression }
IfElement = { "if" ~ "(" ~ Expression ~ ")" ~ Element ~ ("else" ~ Element)? }
ForElement = { "await"? ~ "for" ~ "(" ~ ForLoopParts ~ ")" ~ Element }

// 17.10 Throw

ThrowExpression = { "throw" ~ Expression }
ThrowExpressionWithoutCascade = { "throw" ~ ExpressionWithoutCascade }

// 17.11 Function Expression

FunctionExpression = { FormalParameterPart ~ FunctionExpressionBody }
FunctionExpressionBody =
    { "async"? ~ "=>" ~ Expression
    | ("async" ~ "*"? | "sync" ~ "*")? ~ Block
    }

// 17.12 This

ThisExpression = { "this" }

// 17.13 Instance Creation

// 17.13.1 New

NewExpression = { "new" ~ ConstructorDesignation ~ Arguments }

// 17.13.2 Const

ConstObjectExpression = { "const" ~ ConstructorDesignation ~ Arguments }

// 17.15 Function Invocation

// 17.15.1 Actual Argument Lists

Arguments = { "(" ~ (ArgumentList ~ ","?)? ~ ")" }
ArgumentList =
    { NamedArgument ~ ("," ~ NamedArgument)*
    | ExpressionList ~ ("," ~ NamedArgument)*
    }
NamedArgument = { Label ~ Expression }

// 17.20.2 Cascades

Cascade =
    { Cascade ~ ".." ~ CascadeSection
    | ConditionalExpression ~ ".." ~ CascadeSection
    }
CascadeSection = { CascadeSelector ~ CascadeSectionTail }
CascadeSelector = { "[" ~ Expression ~ "]" | Identifier }
CascadeSectionTail =
    { CascadeAssignment
    | Selector* ~ (AssignableSelector ~ CascadeAssignment)?
    }
CascadeAssignment = { AssignmentOperator ~ ExpressionWithoutCascade }

// 17.22 Assignment

AssignmentOperator = { "=" | CompoundAssignmentOperator }
CompoundAssignmentOperator =
    { "*="
    | "/="
    | "~/="
    | "%="
    | "+="
    | "-="
    | "<<="
    | ">>>="
    | ">>="
    | "&="
    | "^="
    | "|="
    | "??="
    }

// 17.23 Conditional

ConditionalExpression = { IfNullExpression ~ ("?" ~ ExpressionWithoutCascade ~ ":" ~ ExpressionWithoutCascade)? }

// 17.24 If-null Expressions

IfNullExpression = { LogicalOrExpression ~ ("??" ~ LogicalOrExpression)* }

// 17.25 Logical Boolean Expressions

LogicalOrExpression = { LogicalAndExpression ~ ("||" ~ LogicalAndExpression)* }
LogicalAndExpression = { EqualityExpression ~ ("&&" ~ EqualityExpression)* }

// 17.26 Equality

EqualityExpression =
    { RelationalExpression ~ (EqualityOperator ~ RelationalExpression)?
    | "super" ~ EqualityOperator ~ RelationalExpression
    }
EqualityOperator = { "==" | "!=" }

// 17.27 Relational Expressions

RelationalExpression =
    { BitwiseOrExpression ~ (TypeTest | TypeCast | RelationalOperator ~ BitwiseOrExpression)?
    | "super" ~ RelationalOperator ~ BitwiseOrExpression
    }
RelationalOperator = { ">=" | ">" | "<=" | "<" }

// 17.28 Bitwise Expressions

BitwiseOrExpression =
    { BitwiseXorExpression ~ ("|" ~ BitwiseXorExpression)*
    | "super" ~ ("|" ~ BitwiseXorExpression)+
    }
BitwiseXorExpression =
    { BitwiseAndExpression ~ ("^" ~ BitwiseAndExpression)*
    | "super" ~ ("^" ~ BitwiseAndExpression)+
    }
BitwiseAndExpression =
    { ShiftExpression ~ ("&" ~ ShiftExpression)*
    | "super" ~ ("&" ~ ShiftExpression)+
    }
BitwiseOperator = { "&" | "^" | "|" }

// 17.29 Shift

ShiftExpression =
    { AdditiveExpression ~ (ShiftOperator ~ AdditiveExpression)*
    | "super" ~ (ShiftOperator ~ AdditiveExpression)+
    }
ShiftOperator = { "<<" | ">>>" | ">>" }

// 17.30 Additive Expressions

AdditiveExpression =
    { MultiplicativeExpression ~ (AdditiveOperator ~ MultiplicativeExpression)*
    | "super" ~ (AdditiveOperator ~ MultiplicativeExpression)+
    }
AdditiveOperator = { "+" | "-" }

// 17.31 Multiplicative Expressions

MultiplicativeExpression =
    { UnaryExpression ~ (MultiplicativeOperator ~ UnaryExpression)*
    | "super" ~ (MultiplicativeOperator ~ UnaryExpression)+
    }
MultiplicativeOperator = { "*" | "/" | "%" | "~/" }

// 17.32 Unary Expressions

UnaryExpression =
    { PrefixOperator ~ UnaryExpression
    | AwaitExpression
    | PostfixExpression
    | (MinusOperator | TildeOperator) ~ "super"
    | IncrementOperator ~ AssignableExpression
    }
PrefixOperator = { MinusOperator | NegationOperator | TildeOperator }
MinusOperator = { "-" }
NegationOperator = { "!" }
TildeOperator = { "~" }

// 17.33 Await Expression

AwaitExpression = { "await" | UnaryExpression }

// 17.34 Postfix Expressions

PostfixExpression =
    { AssignableExpression ~ PostfixOperator
    | Primary ~ Selector*
    }
PostfixOperator = { IncrementOperator }
ConstructorInvocation = { TypeName ~ TypeArguments ~ "." ~ Identifier ~ Arguments }
Selector = { "!" | AssignableSelector | ArgumentPart }
ArgumentPart = { TypeArguments? ~ Arguments }
IncrementOperator = { "++" | "--" }

// 17.35 Assignable Expressions

AssignableExpression =
    { Primary ~ AssignableSelectorPart
    | "super" ~ UnconditionalAssignableSelector
    | Identifier
    }
AssignableSelectorPart = { Selector* ~ AssignableSelector }
UnconditionalAssignableSelector =
    { "[" ~ Expression ~ "]"
    | "." ~ Identifier
    }
AssignableSelector =
    { UnconditionalAssignableSelector
    | "?." ~ Identifier
    }

// 17.37 Identifier Reference

Identifier = @{ IdentifierStart ~ IdentifierPart* }
BuiltInIdentifier =
    { "abstract"
    | "as"
    | "covariant"
    | "deferred"
    | "dynamic"
    | "export"
    | "external"
    | "extension"
    | "factory"
    | "Function"
    | "get"
    | "implements"
    | "import"
    | "interface"
    | "library"
    | "mixin"
    | "operator"
    | "part"
    | "set"
    | "static"
    | "typedef"
    }
IdentifierNoDollar = @{ IdentifierStartNoDollar ~ IdentifierPartNoDollar* }
IdentifierStart = { IdentifierStartNoDollar | "$" }
IdentifierStartNoDollar = { ASCII_ALPHA | "_" }
IdentifierPartNoDollar = { IdentifierStartNoDollar | ASCII_DIGIT }
IdentifierPart = { IdentifierStart | ASCII_DIGIT }

QualifiedName =
    { TypeIdentifier ~ "." ~ Identifier
    | TypeIdentifier ~ "." ~ TypeIdentifier ~ Identifier
    }

// 17.38 Type Test

TypeTest = {IsOperator ~ TypeNotVoid}
IsOperator = { "is" ~ "!"? }

// 17.39 Type Cast

TypeCast = { AsOperator ~ TypeNotVoid }
AsOperator = { "as" }

// 18 Statements

Statements = { Statement* }
Statement = { Label* ~ NonLabelledStatement }
NonLabelledStatement =
    { Block
    | LocalVariableDeclaration
    | ForStatement
    | WhileStatement
    | DoStatement
    | SwitchStatement
    | IfStatement
    | RethrowStatement
    | TryStatement
    | BreakStatement
    | ContinueStatement
    | ReturnStatement
    | YieldStatement
    | YieldEachStatement
    | ExpressionStatement
    | AssertStatement
    | LocalFunctionDeclaration
    }

// 18.2 Expression Statements

ExpressionStatement = { Expression? ~ ";" }

// 18.3 Local Variable Declaration

LocalVariableDeclaration = { Metadata ~ InitializedVariableDeclaration ~ ";" }

// 18.4 Local Function Declaration

LocalFunctionDeclaration = { Metadata ~ FunctionSignature ~ FunctionBody }

// 18.5 If

IfStatement = { "if" ~ "(" ~ Expression ~ ")" ~ Statement ~ ("else" ~ Statement)? }

// 18.6 For

ForStatement = { "await"? ~ "for" ~ "(" ~ ForLoopParts ~ ")" ~ Statement }
ForLoopParts =
    { ForInitializerStatement ~ Expression? ~ ";" ~ ExpressionList?
    | Metadata ~ DeclaredIdentifier ~ "in" ~ Expression
    | Identifier ~ "in" ~ Expression
    }
ForInitializerStatement = { LocalVariableDeclaration | Expression? ~ ";" }

// 18.7 While

WhileStatement = { "while" ~ "(" ~ Expression ~ ")" ~ Statement }

// 18.8 Do

DoStatement = { "do" ~ Statement ~ "while" ~ "(" ~ Expression ~ ")" ~ ";" }

// 18.9 Switch

SwitchStatement = { "switch" ~ "(" ~ Expression ~ ")" ~ "{" ~ SwitchCase* ~ DefaultCase? ~ "}" }
SwitchCase = { Label* ~ "case" ~ Expression ~ ":" ~ Statements }
DefaultCase = { Label* ~ "default" ~ ":" ~ Statements }

// 18.10 Rethrow

RethrowStatement = { "rethrow" ~ ";" }

// 18.11 Try

TryStatement = { "try" ~ Block ~ (OnPart+ ~ FinallyPart? | FinallyPart) }
OnPart =
    { CatchPart ~ Block
    | "on" ~ TypeNotVoid ~ CatchPart? ~ Block
    }
CatchPart = { "catch" ~ "(" ~ Identifier ~ ("," ~ Identifier)? ~ ")" }
FinallyPart = { "finally" ~ Block }

// 18.12 Return

ReturnStatement = { "return" ~ Expression? ~ ";" }

// 18.13 Labels

Label = { Identifier ~ ":" }

// 18.14 Break

BreakStatement = { "break" ~ Identifier? ~ ";" }

// 18.15 Continue

ContinueStatement = { "continue" ~ Identifier? ~ ";" }

// 18.16 Yield

YieldStatement = { "yield" ~ Expression ~ ";" }

// 18.17 Yield-Each

YieldEachStatement = { "yield" ~ "*" ~ Expression ~ ";" }

// 18.18 Assert

AssertStatement = { Assertion ~ ";" }
Assertion = { "assert" ~ "(" ~ Expression ~ ("," ~ Expression)? ~ ","? ~ ")" }

// 20 Types

// 20.1 Static Types

TypeIdentifier = { !BuiltInIdentifier ~ Identifier }

Type = { FunctionType | TypeNotFunction }
TypeNotVoid = { FunctionType | TypeNotVoidNotFunction }
TypeNotFunction = { "void" | TypeNotVoidNotFunction }
TypeNotVoidNotFunction = { TypeName ~ TypeArguments? | "Function" }

TypeName = { TypeIdentifier ~ ("." ~ TypeIdentifier)? }
TypeArguments = { "<" ~ TypeList ~ ">" }
TypeList = { Type ~ ("," ~ Type)* }
TypeNotVoidNotFunctionList = { TypeNotVoidNotFunction ~ ("," ~ TypeNotVoidNotFunction)* }

FunctionType = { FunctionTypeTails | TypeNotFunction ~ FunctionTypeTails }
FunctionTypeTails = { FunctionTypeTail ~ FunctionTypeTails | FunctionTypeTail }
FunctionTypeTail = { "Function" ~ TypeParameter? ~ ParameterTypeList }

ParameterTypeList =
    { "(" ~ ")"
    | "(" ~ NormalParameterTypes ~ "," ~ OptionalParameterTypes ~ ")"
    | "(" ~ NormalParameterTypes ~ ","? ~ ")"
    | "(" ~ OptionalParameterTypes ~ ")"
    }

NormalParameterTypes = { NormalParameterType ~ ("," ~ NormalParameterType)* }
NormalParameterType = { TypedIdentifier | Type }

OptionalParameterTypes = { OptionalPositionalParameterTypes | NamedParameterTypes }
OptionalPositionalParameterTypes = { "[" ~ NormalParameterTypes ~ ","? ~ "]" }

NamedParameterTypes = { "{" ~ NamedParameterType ~ ("," ~ NamedParameterType)* ~ ","? ~ "}" }
NamedParameterType = { TypedIdentifier }

TypedIdentifier = { Type ~ Identifier }

// 21 Reference

// 21.1 Lexical Rules

// 21.1.2 Comments

SingleLineComment = { "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE? }
MultiLineComment = { "/*" ~ (MultiLineComment | (!"*/" ~ ANY ~ ANY))* ~ "*/" }

// Pest special rules

WHITESPACE = _{ ("\t" | " " | NEWLINE)+ }
COMMENT = _{ SingleLineComment | MultiLineComment }
